from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF
from datetime import datetime
import tempfile
import os
from pathlib import Path
from io import BytesIO

from src.server.utils.map_tools import eventToSVG, MapEvent
from src.server.utils.immich_photo_grab import ImmichPicGrab, ImageModifiers

IMMICH_API_ENDPOINT = os.environ["IMMICH_API_ENDPOINT"]
IMMICH_API_KEY = os.environ["IMMICH_API_KEY"]
ALBUM_ID = os.environ["IMMICH_ALBUM_ID"]
CACHE_STORE = Path(os.environ.get("CACHE_STORE", "temp/photos"))


# https://dzone.com/articles/adding-svgs-to-pdfs-with-python-and-reportlab
def scale(drawing, scaling_factor):
    # scales a reportlab.graphics.shapes.drawing()
    # object while maintaining the aspect ratio

    scaling_x = scaling_factor
    scaling_y = scaling_factor

    drawing.width = drawing.minWidth() * scaling_x
    drawing.height = drawing.height * scaling_y
    drawing.scale(scaling_x, scaling_y)
    return drawing


def gen_map_pdf(page: canvas.Canvas, events: MapEvent, name: str):
    width, height = letter
    page.setFont("Helvetica-Bold", 24)
    page.drawCentredString(width / 2, height - 1 * inch, f"Location Report for {name}")
    page.setFont("Helvetica", 12)

    mins = round(events.getTimeDelta().total_seconds() / 60)
    time_string = ""
    if mins < 60:
        time_string = f"{mins} minute(s)"
    else:
        time_string = f"{mins // 60} hour(s) and {mins % 60} minute(s)"
    page.drawString(
        1 * inch,
        height - 1.5 * inch,
        f"You have been gone for {time_string} and traveled {round(events.distanceTraveled(), 1)} miles.",
    )

    # map is 6.5x8. *4 is for the 0.25 scaling factor
    svg_map = eventToSVG(events, round(6.5 * 4 * inch), round(8 * 4 * inch))

    # maybe there is a better way to this, however svg2rlg requires a path and i don't seem to be able to use a bytesio stream or otherwise
    with tempfile.NamedTemporaryFile(
        delete=True, suffix=".svg", mode="w", encoding="utf-8"
    ) as temp_file:
        svg_map.write(temp_file, pretty=True)
        temp_file.flush()
        map_rlg = svg2rlg(temp_file.name)
        if map_rlg:
            renderPDF.draw(scale(map_rlg, 0.25), page, 1 * inch, 1.25 * inch)
    page.drawString(
        1 * inch,
        1 * inch,
        f'This is an automated report generated by CassieMoves on {datetime.now().strftime("%B %d, %Y, %H:%M:%S")}.',
    )


def gen_photos_pdf(page: canvas.Canvas):
    immich_grabber = ImmichPicGrab(
        CACHE_STORE,
        ALBUM_ID,
        IMMICH_API_ENDPOINT,
        IMMICH_API_KEY,
        ImageModifiers.resizeCassiePage,
    )
    for i in range(0, 4):
        for k in range(0, 3):
            x = round(1 * inch + k * 2.167 * inch)
            y = round(1 * inch + i * 2.25 * inch)
            page.drawInlineImage(
                str(immich_grabber.getRandomPhoto()),
                x,
                y,
                width=2.167 * inch,
                height=2.25 * inch,
            )


def gen_cassie_pdf(events: MapEvent):
    buffer = BytesIO()
    page = canvas.Canvas(buffer, pagesize=letter)
    gen_map_pdf(page, events, "Cassie")
    page.showPage()
    gen_photos_pdf(page)
    page.save()
    return buffer
